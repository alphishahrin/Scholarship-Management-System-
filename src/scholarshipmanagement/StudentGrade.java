/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package scholarshipmanagement;

import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author SARK
 */
public class StudentGrade extends javax.swing.JInternalFrame {
    
    public Connection connection;
    
    String ProfId;
    int currentLength1 = 0;
    int modIndex1  =0;
    ArrayList<StudentGradeInfo> arr1 = new ArrayList ();

    /** Creates new form PackageInfo */
    public StudentGrade() {
        initComponents();
        
    }
    
    public StudentGrade(String ProfId) {
        this.ProfId = ProfId;
        initComponents();
        
        arr1 = new ConnectMSSQL().getStudentGradeInfo("");
        courseTable.setDefaultEditor(Object.class, null);
        clearTable(courseTable);
        
        TableColumnModel columnModel = courseTable.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(10);
        columnModel.getColumn(1).setPreferredWidth(30);
        columnModel.getColumn(2).setPreferredWidth(70);
        columnModel.getColumn(3).setPreferredWidth(70);
        columnModel.getColumn(4).setPreferredWidth(160);
        columnModel.getColumn(5).setPreferredWidth(20);
        columnModel.getColumn(6).setPreferredWidth(300);
        columnModel.getColumn(7).setPreferredWidth(30);
        columnModel.getColumn(8).setPreferredWidth(10);
        columnModel.getColumn(9).setPreferredWidth(10);
        
        if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
        else currentLength1 = 30;
        
        for(int i=0;i<currentLength1;i++)
        {
            courseTable.getModel().setValueAt(arr1.get(i).getStudentID(), i, 0);
            courseTable.getModel().setValueAt(arr1.get(i).getFirstName(), i, 1);
            courseTable.getModel().setValueAt(arr1.get(i).getDepartment(), i, 2);
            courseTable.getModel().setValueAt(arr1.get(i).getSession(), i, 3);
            courseTable.getModel().setValueAt(arr1.get(i).getEmail(), i, 4);
            courseTable.getModel().setValueAt(arr1.get(i).getAverageGrade(), i, 5);
            courseTable.getModel().setValueAt(arr1.get(i).getCourseName(), i, 6);
            courseTable.getModel().setValueAt(arr1.get(i).getGrade(), i, 7);
            courseTable.getModel().setValueAt(arr1.get(i).getYear(), i, 8);
            courseTable.getModel().setValueAt(arr1.get(i).getSemester(), i, 9);
            
        }
        
        prev.setVisible(false);
        if(arr1.size()<=30)
            next.setVisible(false);
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        highestCombo = new javax.swing.JComboBox<>();
        btnSearchHighest = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        sortBy = new javax.swing.JComboBox<>();
        sortBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        avgBtn = new javax.swing.JComboBox<>();
        avgSearch = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        higherGrades = new javax.swing.JComboBox<>();
        txtHigh = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cgpaFrom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cgpaTo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        gradeFrom = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        gradeTo = new javax.swing.JTextField();
        courseName = new javax.swing.JTextField();
        btnSearchRange = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseTable = new javax.swing.JTable();
        prev = new javax.swing.JButton();
        next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(750, 570));
        setMinimumSize(new java.awt.Dimension(750, 570));
        setPreferredSize(new java.awt.Dimension(1320, 730));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(206, 124, 151));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Student's Course Result");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(459, 459, 459)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1330, 60));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel7.setText("See Highest Grade:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        highestCombo.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        highestCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course-wise", "Department-wise", "Session-wise" }));
        getContentPane().add(highestCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, -1, -1));

        btnSearchHighest.setText("SEARCH");
        btnSearchHighest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchHighestActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearchHighest, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 90, -1, -1));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel8.setText("Sort By:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 89, -1, 30));

        sortBy.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        sortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Department", "Session", "CGPA (Ascending)", "CGPA (Descending)", "Course Name", "Year" }));
        sortBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByActionPerformed(evt);
            }
        });
        getContentPane().add(sortBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 90, -1, 30));

        sortBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scholarshipmanagement/sort-down.png"))); // NOI18N
        sortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBtnActionPerformed(evt);
            }
        });
        getContentPane().add(sortBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 90, -1, -1));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel9.setText("See Average Grade:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 150, -1, 30));

        avgBtn.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        avgBtn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course-wise", "Session-wise", "Department-wise" }));
        getContentPane().add(avgBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1054, 150, 150, -1));

        avgSearch.setText("SEARCH");
        avgSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgSearchActionPerformed(evt);
            }
        });
        getContentPane().add(avgSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 150, -1, -1));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel10.setText("Grades Higher Than:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, -1));

        higherGrades.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        higherGrades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name (All)", "Name (Averege)", "Id (All)", "Id (Average)" }));
        getContentPane().add(higherGrades, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 150, -1, -1));
        getContentPane().add(txtHigh, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 150, 110, 30));

        jButton1.setText("SEARCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 150, -1, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel3.setText("CGPA In Range:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, -1));
        getContentPane().add(cgpaFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, 80, 30));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel4.setText("To:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 210, -1, -1));

        cgpaTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cgpaToActionPerformed(evt);
            }
        });
        getContentPane().add(cgpaTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 210, 80, 30));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel5.setText("Course Grade In Range:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 210, -1, 30));

        gradeFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeFromActionPerformed(evt);
            }
        });
        getContentPane().add(gradeFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 210, 80, 30));

        jLabel6.setText("To:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 210, -1, 30));

        gradeTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeToActionPerformed(evt);
            }
        });
        getContentPane().add(gradeTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 210, 80, 30));

        courseName.setText("Enter Course Name");
        courseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseNameActionPerformed(evt);
            }
        });
        getContentPane().add(courseName, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 210, 150, 30));

        btnSearchRange.setText("SEARCH");
        btnSearchRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchRangeActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearchRange, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 210, -1, -1));

        jButton3.setText("RESET");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 210, -1, -1));

        courseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Departement", "Session", "Email", "CGPA", "Course Name", "Grade", "Year", "Semester"
            }
        ));
        jScrollPane1.setViewportView(courseTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 1280, 380));

        prev.setText("Prev");
        prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevActionPerformed(evt);
            }
        });
        getContentPane().add(prev, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 660, -1, -1));

        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });
        getContentPane().add(next, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 660, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scholarshipmanagement/size.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 0, 1330, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchHighestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchHighestActionPerformed
        // TODO add your handling code here:

        if(highestCombo.getSelectedItem()== "Course-wise")
        {
            ArrayList<StudentGradeInfo> database = new ArrayList();

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Scholarship;selectMethod=cursor", "sa", "123456");

                Statement statement = connection.createStatement();
                ResultSet resultSet = statement
                .executeQuery("SELECT s.StudentId, s.FirstName, s.LastName, s.Department, s.Session, s.Email, s.AverageGrade, cs.CourseName, cs.Grade, cs.Year, cs.Semester FROM Student  AS s INNER JOIN\n" +
                    "(SELECT cs.* \n" +
                    "FROM CourseResult cs\n" +
                    "INNER JOIN (SELECT Coursename , MAX(Grade) as MaxGrade\n" +
                    "FROM CourseResult\n" +
                    "GROUP BY Coursename ) cc\n" +
                    "ON cs.CourseName = cc.CourseName\n" +
                    "AND cs.Grade = cc.MaxGrade) as cs ON (s.StudentID = cs.StudentId)");
                System.out.print("SELECT s.StudentId, s.FirstName, s.LastName, s.Department, s.Session, s.Email, s.AverageGrade, cs.CourseName, cs.Grade, cs.Year, cs.Semester FROM Student  AS s INNER JOIN\n" +
                    "(SELECT cs.* \n" +
                    "FROM CourseResult cs\n" +
                    "INNER JOIN (SELECT Coursename , MAX(Grade) as MaxGrade\n" +
                    "    FROM CourseResult\n" +
                    "    GROUP BY Coursename ) cc\n" +
                    "ON cs.CourseName = cc.CourseName\n" +
                    "AND cs.Grade = cc.MaxGrade) as cs ON (s.StudentID = cs.StudentId)");
                while (resultSet.next()) {
                    StudentGradeInfo temp = new StudentGradeInfo();
                    temp.setStudentID(resultSet.getInt("StudentId"));
                    temp.setFirstName(resultSet.getString("FirstName").toString());
                    temp.setDepartment(resultSet.getString("Department").toString());
                    temp.setSession(resultSet.getString("Session").toString());
                    temp.setEmail(resultSet.getString("Email").toString());
                    temp.setAverageGrade(resultSet.getFloat("AverageGrade"));
                    temp.setCourseName(resultSet.getString("CourseName").toString());
                    temp.setYear(resultSet.getInt("Year"));
                    temp.setSemester(resultSet.getInt("Semester"));
                    temp.setGrade(resultSet.getFloat("Grade"));

                    database.add(temp);
                }

            }
            catch (Exception e) {
                e.printStackTrace();
            }

            arr1.clear();
            arr1 = database;

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);
            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }

        else if(highestCombo.getSelectedItem()== "Department-wise")
        {
            ArrayList<StudentGradeInfo> database = new ArrayList();

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Scholarship;selectMethod=cursor", "sa", "123456");

                Statement statement = connection.createStatement();
                ResultSet resultSet = statement
                .executeQuery("Select s.StudentID, s.FirstName, s.Department, s.Session, s.Email, s.AverageGrade, ss.CourseName, ss.Grade, ss.Year, ss.Semester \n" +
                    "FROM Student  AS s INNER JOIN CourseResult AS ss\n" +
                    "ON (s.StudentID = ss.StudentId) INNER JOIN (Select p.Department as temp, MAX(ps.Grade) as MaxGrade\n" +
                    "FROM Student  AS p INNER JOIN CourseResult AS ps\n" +
                    "ON (p.StudentID = ps.StudentId) GROUP BY p.Department ) dd ON (dd.temp=s.Department and dd.MaxGrade=ss.Grade)");
                System.out.print("Select s.StudentID, s.FirstName, s.Department, s.Session, s.Email, s.AverageGrade, ss.CourseName, ss.Grade, ss.Year, ss.Semester \n" +
                    "FROM Student  AS s INNER JOIN CourseResult AS ss\n" +
                    "ON (s.StudentID = ss.StudentId) INNER JOIN (Select p.Department as temp, MAX(ps.Grade) as MaxGrade\n" +
                    "FROM Student  AS p INNER JOIN CourseResult AS ps\n" +
                    "ON (p.StudentID = ps.StudentId) GROUP BY p.Department ) dd ON (dd.temp=s.Department and dd.MaxGrade=ss.Grade)");
                while (resultSet.next()) {
                    StudentGradeInfo temp = new StudentGradeInfo();
                    temp.setStudentID(resultSet.getInt("StudentId"));
                    temp.setFirstName(resultSet.getString("FirstName").toString());
                    temp.setDepartment(resultSet.getString("Department").toString());
                    temp.setSession(resultSet.getString("Session").toString());
                    temp.setEmail(resultSet.getString("Email").toString());
                    temp.setAverageGrade(resultSet.getFloat("AverageGrade"));
                    temp.setCourseName(resultSet.getString("CourseName").toString());
                    temp.setYear(resultSet.getInt("Year"));
                    temp.setSemester(resultSet.getInt("Semester"));
                    temp.setGrade(resultSet.getFloat("Grade"));

                    database.add(temp);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            arr1.clear();
            arr1 = database;

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);
            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
        else if(highestCombo.getSelectedItem()== "Session-wise")
        {
            ArrayList<StudentGradeInfo> database = new ArrayList();

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Scholarship;selectMethod=cursor", "sa", "123456");

                Statement statement = connection.createStatement();
                ResultSet resultSet = statement
                .executeQuery("Select s.StudentID, s.FirstName, s.Department, s.Session, s.Email, s.AverageGrade, ss.CourseName, ss.Grade, ss.Year, ss.Semester \n" +
                    "FROM Student  AS s INNER JOIN CourseResult AS ss\n" +
                    "ON (s.StudentID = ss.StudentId) INNER JOIN (Select p.Session as temp, MAX(ps.Grade) as MaxGrade\n" +
                    "FROM Student  AS p INNER JOIN CourseResult AS ps\n" +
                    "ON (p.StudentID = ps.StudentId) GROUP BY p.Session ) dd ON (dd.temp=s.Session and dd.MaxGrade=ss.Grade)\n" +
                    "Order By RIGHT(s.Session, 2) ASC");

                System.out.print("Select s.StudentID, s.FirstName, s.Department, s.Session, s.Email, s.AverageGrade, ss.CourseName, ss.Grade, ss.Year, ss.Semester \n" +
                    "FROM Student  AS s INNER JOIN CourseResult AS ss\n" +
                    "ON (s.StudentID = ss.StudentId) INNER JOIN (Select p.Session as temp, MAX(ps.Grade) as MaxGrade\n" +
                    "FROM Student  AS p INNER JOIN CourseResult AS ps\n" +
                    "ON (p.StudentID = ps.StudentId) GROUP BY p.Session ) dd ON (dd.temp=s.Session and dd.MaxGrade=ss.Grade)\n" +
                    "Order By RIGHT(s.Session, 2) ASC");
                while (resultSet.next()) {
                    StudentGradeInfo temp = new StudentGradeInfo();
                    temp.setStudentID(resultSet.getInt("StudentId"));
                    temp.setFirstName(resultSet.getString("FirstName").toString());
                    temp.setDepartment(resultSet.getString("Department").toString());
                    temp.setSession(resultSet.getString("Session").toString());
                    temp.setEmail(resultSet.getString("Email").toString());
                    temp.setAverageGrade(resultSet.getFloat("AverageGrade"));
                    temp.setCourseName(resultSet.getString("CourseName").toString());
                    temp.setYear(resultSet.getInt("Year"));
                    temp.setSemester(resultSet.getInt("Semester"));
                    temp.setGrade(resultSet.getFloat("Grade"));

                    database.add(temp);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            arr1.clear();
            arr1 = database;

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);
            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
    }//GEN-LAST:event_btnSearchHighestActionPerformed

    private void sortByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortByActionPerformed

    private void sortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBtnActionPerformed
        // TODO add your handling code here:
        next.setVisible(true);
        String sortItem = sortBy.getSelectedItem().toString();
        if(sortItem == "Department")
        {
            String query="order by Student.Department";
            arr1.clear();
            arr1 = new ConnectMSSQL().getStudentGradeInfo(query);

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i).getSemester(), i, 9);

            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
            if(arr1.size()>30)
            next.setVisible(true);
        }
        else if(sortItem == "Session")
        {
            String query="order by RIGHT(Student.Session, 2) ASC";
            arr1.clear();
            arr1 = new ConnectMSSQL().getStudentGradeInfo(query);

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i).getSemester(), i, 9);

            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
        else if(sortItem == "CGPA (Ascending)")
        {
            String query="order by AverageGrade ASC";
            arr1.clear();
            arr1 = new ConnectMSSQL().getStudentGradeInfo(query);

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i).getSemester(), i, 9);

            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
        else if(sortItem == "CGPA (Descending)")
        {
            String query="order by AverageGrade desc";
            arr1.clear();
            arr1 = new ConnectMSSQL().getStudentGradeInfo(query);

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i).getSemester(), i, 9);

            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
        else if(sortItem == "Course Name")
        {
            String query="order by CourseResult.CourseName";
            arr1.clear();
            arr1 = new ConnectMSSQL().getStudentGradeInfo(query);

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i).getSemester(), i, 9);

            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
        else if(sortItem == "Year")
        {
            String query="order by CourseResult.Year, CourseResult.Semester";
            arr1.clear();
            arr1 = new ConnectMSSQL().getStudentGradeInfo(query);

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i).getSemester(), i, 9);

            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
    }//GEN-LAST:event_sortBtnActionPerformed

    private void avgSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgSearchActionPerformed
        // TODO add your handling code here:
        String avg = avgBtn.getSelectedItem().toString();
        if(avg == "Course-wise")
        {
            ArrayList<StudentGradeInfo> database = new ArrayList();

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Scholarship;selectMethod=cursor", "sa", "123456");

                Statement statement = connection.createStatement();
                ResultSet resultSet = statement
                .executeQuery("Select CourseResult.CourseName, AVG(CourseResult.Grade) AS Avg, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "group by CourseResult.CourseName, CourseResult.Year, CourseResult.Semester");
                System.out.print("Select CourseResult.CourseName, AVG(CourseResult.Grade), CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "group by CourseResult.CourseName, CourseResult.Year, CourseResult.Semester");
                while (resultSet.next()) {
                    StudentGradeInfo temp = new StudentGradeInfo();
                    //temp.setStudentID(resultSet.getInt("StudentId"));
                    //temp.setFirstName(resultSet.getString("FirstName").toString());
                    //temp.setDepartment(resultSet.getString("Department").toString());
                    //temp.setSession(resultSet.getString("Session").toString());
                    //temp.setEmail(resultSet.getString("Email").toString());
                    //temp.setAverageGrade(resultSet.getFloat("AverageGrade"));
                    temp.setCourseName(resultSet.getString("CourseName").toString());
                    temp.setYear(resultSet.getInt("Year"));
                    temp.setSemester(resultSet.getInt("Semester"));
                    temp.setGrade(resultSet.getFloat("Avg"));

                    database.add(temp);
                }

            }
            catch (Exception e) {
                e.printStackTrace();
            }

            arr1.clear();
            arr1 = database;

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt("", i, 0);
                courseTable.getModel().setValueAt("", i, 1);
                courseTable.getModel().setValueAt("", i, 2);
                courseTable.getModel().setValueAt("", i, 3);
                courseTable.getModel().setValueAt("", i, 4);
                courseTable.getModel().setValueAt("", i, 5);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);

            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
        else if(avg == "Session-wise")
        {
            ArrayList<StudentGradeInfo> database = new ArrayList();

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Scholarship;selectMethod=cursor", "sa", "123456");

                Statement statement = connection.createStatement();
                ResultSet resultSet = statement
                .executeQuery("Select Student.Session, AVG(CourseResult.Grade) AS Avg\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "group by Student.Session");
                System.out.print("Select Student.Session, AVG(CourseResult.Grade) AS Avg\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "group by Student.Session");
                while (resultSet.next()) {
                    StudentGradeInfo temp = new StudentGradeInfo();
                    //temp.setStudentID(resultSet.getInt("StudentId"));
                    //temp.setFirstName(resultSet.getString("FirstName").toString());
                    //temp.setDepartment(resultSet.getString("Department").toString());
                    temp.setSession(resultSet.getString("Session").toString());
                    //temp.setEmail(resultSet.getString("Email").toString());
                    //temp.setAverageGrade(resultSet.getFloat("AverageGrade"));
                    //temp.setCourseName(resultSet.getString("CourseName").toString());
                    //temp.setYear(resultSet.getInt("Year"));
                    //temp.setSemester(resultSet.getInt("Semester"));
                    temp.setGrade(resultSet.getFloat("Avg"));

                    database.add(temp);
                }

            }
            catch (Exception e) {
                e.printStackTrace();
            }

            arr1.clear();
            arr1 = database;

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt("", i, 0);
                courseTable.getModel().setValueAt("", i, 1);
                courseTable.getModel().setValueAt("", i, 2);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSession(), i, 3);
                courseTable.getModel().setValueAt("", i, 4);
                courseTable.getModel().setValueAt("", i, 5);
                courseTable.getModel().setValueAt("", i, 6);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
                courseTable.getModel().setValueAt("", i, 8);
                courseTable.getModel().setValueAt("", i, 9);

            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
        else if(avg == "Department-wise")
        {
            ArrayList<StudentGradeInfo> database = new ArrayList();

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Scholarship;selectMethod=cursor", "sa", "123456");

                Statement statement = connection.createStatement();
                ResultSet resultSet = statement
                .executeQuery("Select Student.Department, AVG(CourseResult.Grade) AS Avg, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "group by Student.Department, CourseResult.Year, CourseResult.Semester");
                System.out.print("Select Student.Department, AVG(CourseResult.Grade) AS Avg, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "group by Student.Department, CourseResult.Year, CourseResult.Semester");
                while (resultSet.next()) {
                    StudentGradeInfo temp = new StudentGradeInfo();
                    //temp.setStudentID(resultSet.getInt("StudentId"));
                    //temp.setFirstName(resultSet.getString("FirstName").toString());
                    temp.setDepartment(resultSet.getString("Department").toString());
                    //temp.setSession(resultSet.getString("Session").toString());
                    //temp.setEmail(resultSet.getString("Email").toString());
                    //temp.setAverageGrade(resultSet.getFloat("AverageGrade"));
                    //temp.setCourseName(resultSet.getString("CourseName").toString());
                    temp.setYear(resultSet.getInt("Year"));
                    temp.setSemester(resultSet.getInt("Semester"));
                    temp.setGrade(resultSet.getFloat("Avg"));

                    database.add(temp);
                }

            }
            catch (Exception e) {
                e.printStackTrace();
            }

            arr1.clear();
            arr1 = database;

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%230;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt("", i, 0);
                courseTable.getModel().setValueAt("", i, 1);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getDepartment(), i, 2);
                courseTable.getModel().setValueAt("", i, 3);
                courseTable.getModel().setValueAt("", i, 4);
                courseTable.getModel().setValueAt("", i, 5);
                courseTable.getModel().setValueAt("", i, 6);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);

            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
    }//GEN-LAST:event_avgSearchActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String higherThan = higherGrades.getSelectedItem().toString();
        String higher = txtHigh.getText().toString();
        if(higherThan == "Name (All)")
        {
            ArrayList<StudentGradeInfo> database = new ArrayList();

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Scholarship;selectMethod=cursor", "sa", "123456");

                Statement statement = connection.createStatement();
                ResultSet resultSet = statement
                .executeQuery("Select Student.StudentID, Student.FirstName, Student.Department, Student.Session, Student.Email, Student.AverageGrade, CourseResult.CourseName, CourseResult.Grade, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "Where CourseResult.Grade >= ALL (Select CourseResult.Grade From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId where FirstName = '"+higher+"')");

                System.out.print("Select Student.StudentID, Student.FirstName, Student.Department, Student.Session, Student.Email, Student.AverageGrade, CourseResult.CourseName, CourseResult.Grade, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "Where CourseResult.Grade >= ALL (Select CourseResult.Grade From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId where FirstName = '"+higher+"')");
                while (resultSet.next()) {
                    StudentGradeInfo temp = new StudentGradeInfo();
                    temp.setStudentID(resultSet.getInt("StudentId"));
                    temp.setFirstName(resultSet.getString("FirstName").toString());
                    temp.setDepartment(resultSet.getString("Department").toString());
                    temp.setSession(resultSet.getString("Session").toString());
                    temp.setEmail(resultSet.getString("Email").toString());
                    temp.setAverageGrade(resultSet.getFloat("AverageGrade"));
                    temp.setCourseName(resultSet.getString("CourseName").toString());
                    temp.setYear(resultSet.getInt("Year"));
                    temp.setSemester(resultSet.getInt("Semester"));
                    temp.setGrade(resultSet.getFloat("Grade"));

                    database.add(temp);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            arr1.clear();
            arr1 = database;

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);
            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);

        }
        else if(higherThan == "Name (Averege)")
        {
            ArrayList<StudentGradeInfo> database = new ArrayList();

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Scholarship;selectMethod=cursor", "sa", "123456");

                Statement statement = connection.createStatement();
                ResultSet resultSet = statement
                .executeQuery("Select Student.StudentID, Student.FirstName, Student.Department, Student.Session, Student.Email, Student.AverageGrade, CourseResult.CourseName, CourseResult.Grade, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "Where CourseResult.Grade >= ALL (Select Avg(CourseResult.Grade) From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId where FirstName = '"+higher+"')");

                System.out.print("Select Student.StudentID, Student.FirstName, Student.Department, Student.Session, Student.Email, Student.AverageGrade, CourseResult.CourseName, CourseResult.Grade, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "Where CourseResult.Grade >= ALL (Select Avg(CourseResult.Grade) From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId where FirstName = '"+higher+"')");
                while (resultSet.next()) {
                    StudentGradeInfo temp = new StudentGradeInfo();
                    temp.setStudentID(resultSet.getInt("StudentId"));
                    temp.setFirstName(resultSet.getString("FirstName").toString());
                    temp.setDepartment(resultSet.getString("Department").toString());
                    temp.setSession(resultSet.getString("Session").toString());
                    temp.setEmail(resultSet.getString("Email").toString());
                    temp.setAverageGrade(resultSet.getFloat("AverageGrade"));
                    temp.setCourseName(resultSet.getString("CourseName").toString());
                    temp.setYear(resultSet.getInt("Year"));
                    temp.setSemester(resultSet.getInt("Semester"));
                    temp.setGrade(resultSet.getFloat("Grade"));

                    database.add(temp);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            arr1.clear();
            arr1 = database;

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);
            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
        else if(higherThan == "Id (All)")
        {
            ArrayList<StudentGradeInfo> database = new ArrayList();

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Scholarship;selectMethod=cursor", "sa", "123456");

                Statement statement = connection.createStatement();
                ResultSet resultSet = statement
                .executeQuery("Select Student.StudentID, Student.FirstName, Student.Department, Student.Session, Student.Email, Student.AverageGrade, CourseResult.CourseName, CourseResult.Grade, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "Where CourseResult.Grade >= ALL (Select CourseResult.Grade From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId where Student.StudentID = '"+higher+"')");

                System.out.print("Select Student.StudentID, Student.FirstName, Student.Department, Student.Session, Student.Email, Student.AverageGrade, CourseResult.CourseName, CourseResult.Grade, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "Where CourseResult.Grade >= ALL (Select CourseResult.Grade From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId where Student.StudentID = '"+higher+"')");
                while (resultSet.next()) {
                    StudentGradeInfo temp = new StudentGradeInfo();
                    temp.setStudentID(resultSet.getInt("StudentId"));
                    temp.setFirstName(resultSet.getString("FirstName").toString());
                    temp.setDepartment(resultSet.getString("Department").toString());
                    temp.setSession(resultSet.getString("Session").toString());
                    temp.setEmail(resultSet.getString("Email").toString());
                    temp.setAverageGrade(resultSet.getFloat("AverageGrade"));
                    temp.setCourseName(resultSet.getString("CourseName").toString());
                    temp.setYear(resultSet.getInt("Year"));
                    temp.setSemester(resultSet.getInt("Semester"));
                    temp.setGrade(resultSet.getFloat("Grade"));

                    database.add(temp);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            arr1.clear();
            arr1 = database;

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);
            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
        else if(higherThan == "Id (Average)")
        {
            ArrayList<StudentGradeInfo> database = new ArrayList();

            try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=Scholarship;selectMethod=cursor", "sa", "123456");

                Statement statement = connection.createStatement();
                ResultSet resultSet = statement
                .executeQuery("Select Student.StudentID, Student.FirstName, Student.Department, Student.Session, Student.Email, Student.AverageGrade, CourseResult.CourseName, CourseResult.Grade, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "Where CourseResult.Grade >= ALL (Select Avg(CourseResult.Grade) From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId where Student.StudentID = '"+higher+"')");

                System.out.print("Select Student.StudentID, Student.FirstName, Student.Department, Student.Session, Student.Email, Student.AverageGrade, CourseResult.CourseName, CourseResult.Grade, CourseResult.Year, CourseResult.Semester\n" +
                    "From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId\n" +
                    "Where CourseResult.Grade >= ALL (Select Avg(CourseResult.Grade) From Student INNER JOIN CourseResult\n" +
                    "On Student.StudentID = CourseResult.StudentId where Student.StudentID = '"+higher+"')");
                while (resultSet.next()) {
                    StudentGradeInfo temp = new StudentGradeInfo();
                    temp.setStudentID(resultSet.getInt("StudentId"));
                    temp.setFirstName(resultSet.getString("FirstName").toString());
                    temp.setDepartment(resultSet.getString("Department").toString());
                    temp.setSession(resultSet.getString("Session").toString());
                    temp.setEmail(resultSet.getString("Email").toString());
                    temp.setAverageGrade(resultSet.getFloat("AverageGrade"));
                    temp.setCourseName(resultSet.getString("CourseName").toString());
                    temp.setYear(resultSet.getInt("Year"));
                    temp.setSemester(resultSet.getInt("Semester"));
                    temp.setGrade(resultSet.getFloat("Grade"));

                    database.add(temp);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            arr1.clear();
            arr1 = database;

            modIndex1 = 0;

            clearTable(courseTable);

            if((modIndex1+1)*30>arr1.size())
            currentLength1 = arr1.size()%30;
            else currentLength1 = 30;

            for(int i=0;i<currentLength1;i++)
            {
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getStudentID(), i, 0);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getFirstName(), i, 1);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getDepartment(), i, 2);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSession(), i, 3);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getEmail(), i, 4);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getAverageGrade(), i, 5);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getCourseName(), i, 6);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
                courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);
            }

            prev.setVisible(false);
            if(arr1.size()<=30)
            next.setVisible(false);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cgpaToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cgpaToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cgpaToActionPerformed

    private void gradeFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeFromActionPerformed

    private void gradeToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeToActionPerformed

    private void btnSearchRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchRangeActionPerformed
        // TODO add your handling code here:
        String query = "";
        String temp ;
        Float tempFrom, tempTo;

        if((cgpaFrom.getText().toString().equals("")  && cgpaTo.getText().toString().equals("")) || (cgpaFrom.getText().length()==0 && cgpaTo.getText().length() ==0 ))
        {
            if(query.length()==0)
            {
                query+= " where Student.AverageGrade between 0.00 AND 4";
            }
            else query+=" and Student.AverageGrade between 0.00 AND 4";
            
        }
        else if (cgpaFrom.getText().length()==0 || cgpaTo.getText().length() ==0 ){
            JOptionPane.showMessageDialog(this, "Both of the Average Grade Field Has to be Filled", "Warning",JOptionPane.WARNING_MESSAGE);
        }
        else if(cgpaFrom.getText().toString().equals("")==false && cgpaTo.getText().toString().equals("")==false){
            tempFrom = Float.valueOf(cgpaFrom.getText());
            tempTo = Float.valueOf(cgpaTo.getText());
            if(query.length()==0)
            {
                query+= " where Student.AverageGrade between "+tempFrom+" AND "+tempTo;
            }
            else query+=" and Student.AverageGrade between "+tempFrom+" AND "+tempTo;
            
        }
        
        
        if((gradeFrom.getText().toString().equals("")  && gradeTo.getText().toString().equals("")) || (gradeFrom.getText().length()==0 && gradeTo.getText().length() ==0 ))
        {
            if(query.length()==0)
            {
                query+= " where CourseResult.Grade between 0.00 AND 4";
            }
            else query+=" and CourseResult.Grade between 0.00 AND 4";
            
        }
        else if (gradeFrom.getText().length()==0 || gradeTo.getText().length() ==0 ){
            JOptionPane.showMessageDialog(this, "Both of the Course Grade Field Has to be Filled", "Warning",JOptionPane.WARNING_MESSAGE);
        }
        else if(gradeFrom.getText().toString().equals("")==false && gradeTo.getText().toString().equals("")==false){
            tempFrom = Float.valueOf(gradeFrom.getText());
            tempTo = Float.valueOf(gradeTo.getText());
            if(query.length()==0)
            {
                query+= " where CourseResult.Grade between "+tempFrom+" AND "+tempTo;
            }
            else query+=" and CourseResult.Grade between "+tempFrom+" AND "+tempTo;
            
        }
        
        
        temp = courseName.getText();
        if(temp.equals("Enter Course Name")==false && temp.length()>0)
        {
            if(query.length()==0)
            {
                query+= " where CourseName LIKE '%"+temp+"%'";
            }
            else query+=" and CourseName LIKE '%"+temp+"%'";
        }
        System.out.println();
        System.out.println();
        System.out.println(query);

        arr1.clear();
        arr1 = new ConnectMSSQL().getStudentGradeInfo(query);

        modIndex1 = 0;

        clearTable(courseTable);

        if((modIndex1+1)*30>arr1.size())
        currentLength1 = arr1.size()%30;
        else currentLength1 = 30;

        for(int i=0;i<currentLength1;i++)
        {
            courseTable.getModel().setValueAt(arr1.get(i).getStudentID(), i, 0);
            courseTable.getModel().setValueAt(arr1.get(i).getFirstName(), i, 1);
            courseTable.getModel().setValueAt(arr1.get(i).getDepartment(), i, 2);
            courseTable.getModel().setValueAt(arr1.get(i).getSession(), i, 3);
            courseTable.getModel().setValueAt(arr1.get(i).getEmail(), i, 4);
            courseTable.getModel().setValueAt(arr1.get(i).getAverageGrade(), i, 5);
            courseTable.getModel().setValueAt(arr1.get(i).getCourseName(), i, 6);
            courseTable.getModel().setValueAt(arr1.get(i).getGrade(), i, 7);
            courseTable.getModel().setValueAt(arr1.get(i).getYear(), i, 8);
            courseTable.getModel().setValueAt(arr1.get(i).getSemester(), i, 9);

        }

        prev.setVisible(false);
        if(arr1.size()<=30)
        next.setVisible(false);
    }//GEN-LAST:event_btnSearchRangeActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        courseName.setText("Enter Course Name");
        cgpaFrom.setText("");
        cgpaTo.setText("");
        gradeFrom.setText("");
        gradeTo.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevActionPerformed
        // TODO add your handling code here:
        modIndex1--;
        if(modIndex1==0)
        prev.setVisible(false);
        next.setVisible(true);
        clearTable(courseTable);
        if((modIndex1+1)*30>arr1.size())
        currentLength1 = arr1.size()%30;
        else currentLength1 = 30;

        for(int i=0;i<currentLength1;i++)
        {
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getStudentID(), i, 0);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getFirstName(), i, 1);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getDepartment(), i, 2);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSession(), i, 3);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getEmail(), i, 4);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getAverageGrade(), i, 5);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getCourseName(), i, 6);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);

        }
    }//GEN-LAST:event_prevActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        // TODO add your handling code here:
        modIndex1++;
        prev.setVisible(true);
        if((modIndex1+1)*30>=arr1.size())
        next.setVisible(false);
        clearTable(courseTable);
        if((modIndex1+1)*30>arr1.size())
        currentLength1 = arr1.size()%30;
        else currentLength1 = 30;

        for(int i=0;i<currentLength1;i++)
        {
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getStudentID(), i, 0);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getFirstName(), i, 1);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getDepartment(), i, 2);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSession(), i, 3);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getEmail(), i, 4);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getAverageGrade(), i, 5);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getCourseName(), i, 6);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getGrade(), i, 7);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getYear(), i, 8);
            courseTable.getModel().setValueAt(arr1.get(i+30*modIndex1).getSemester(), i, 9);

        }
    }//GEN-LAST:event_nextActionPerformed

    private void courseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_courseNameActionPerformed

    public static void clearTable(final JTable table) {
        for (int i = 0; i < table.getRowCount(); i++) {
            for(int j = 0; j < table.getColumnCount(); j++) {
                table.setValueAt("", i, j);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> avgBtn;
    private javax.swing.JButton avgSearch;
    private javax.swing.JButton btnSearchHighest;
    private javax.swing.JButton btnSearchRange;
    private javax.swing.JTextField cgpaFrom;
    private javax.swing.JTextField cgpaTo;
    private javax.swing.JTextField courseName;
    private javax.swing.JTable courseTable;
    private javax.swing.JTextField gradeFrom;
    private javax.swing.JTextField gradeTo;
    private javax.swing.JComboBox<String> higherGrades;
    private javax.swing.JComboBox<String> highestCombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton next;
    private javax.swing.JButton prev;
    private javax.swing.JButton sortBtn;
    private javax.swing.JComboBox<String> sortBy;
    private javax.swing.JTextField txtHigh;
    // End of variables declaration//GEN-END:variables

}
