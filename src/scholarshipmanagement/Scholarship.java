/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package scholarshipmanagement;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author SARK
 */
public class Scholarship extends javax.swing.JInternalFrame {
    
    String StudentId;
    int currentLength = 0;
    int modIndex  =0;
    ArrayList<ScholarshipInfo> arr1 = new ArrayList ();

    /** Creates new form PackageInfo */
    public Scholarship() {
        initComponents();
    }
    
    public Scholarship(String StudentId) {
        this.StudentId = StudentId;
        initComponents();
        
        arr1 = new ConnectMSSQL().getScholarshipInfo("where  exists (Select ScholarshipID from Scholarship) ");
        scholtable.setDefaultEditor(Object.class, null);
        clearTable(scholtable);
        
        
        if((modIndex+1)*8>arr1.size())
            currentLength = arr1.size()%8;
        else currentLength = 8;
        
        for(int i=0;i<currentLength;i++)
        {
            scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
            scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
            scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
            scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
            scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
            scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
            scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
            scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
            scholtable.getModel().setValueAt("Details", i, 8);
            
        }
       
        scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
        scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
        prevButton.setVisible(false);
        if(arr1.size()<=8)
            nextButton.setVisible(false);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        cgTo = new javax.swing.JTextField();
        searchUni = new javax.swing.JTextField();
        searchDate = new javax.swing.JTextField();
        searchSession = new javax.swing.JTextField();
        searchSub = new javax.swing.JTextField();
        searchCountry = new javax.swing.JTextField();
        search1 = new javax.swing.JButton();
        reset1 = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        searchName = new javax.swing.JTextField();
        cgFrom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        prFrom = new javax.swing.JTextField();
        sortBy = new javax.swing.JComboBox<>();
        prTo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        sortBy1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        scholtable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(750, 570));
        setMinimumSize(new java.awt.Dimension(750, 570));
        setPreferredSize(new java.awt.Dimension(1320, 730));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(148, 169, 117));

        label1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        label1.setForeground(new java.awt.Color(255, 255, 255));
        label1.setText("Scolarship");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(517, 517, 517)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(574, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1310, 65));

        cgTo.setBackground(new java.awt.Color(235, 249, 223));
        cgTo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cgTo.setText("To");
        cgTo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cgToMouseClicked(evt);
            }
        });
        cgTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cgToActionPerformed(evt);
            }
        });
        getContentPane().add(cgTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 190, 90, 30));

        searchUni.setBackground(new java.awt.Color(235, 249, 223));
        searchUni.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        searchUni.setText("Search By University");
        searchUni.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchUniMouseClicked(evt);
            }
        });
        searchUni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUniActionPerformed(evt);
            }
        });
        getContentPane().add(searchUni, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, 210, 30));

        searchDate.setBackground(new java.awt.Color(235, 249, 223));
        searchDate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        searchDate.setText("Search By Last Date");
        searchDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchDateMouseClicked(evt);
            }
        });
        searchDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDateActionPerformed(evt);
            }
        });
        getContentPane().add(searchDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 140, 200, 30));

        searchSession.setBackground(new java.awt.Color(235, 249, 223));
        searchSession.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        searchSession.setText("Search By Session");
        searchSession.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchSessionMouseClicked(evt);
            }
        });
        searchSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSessionActionPerformed(evt);
            }
        });
        getContentPane().add(searchSession, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 210, 30));

        searchSub.setBackground(new java.awt.Color(235, 249, 223));
        searchSub.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        searchSub.setText("Search By Subject");
        searchSub.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchSubMouseClicked(evt);
            }
        });
        searchSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSubActionPerformed(evt);
            }
        });
        getContentPane().add(searchSub, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, 210, 30));

        searchCountry.setBackground(new java.awt.Color(235, 249, 223));
        searchCountry.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        searchCountry.setText("Search By Country");
        searchCountry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchCountryMouseClicked(evt);
            }
        });
        searchCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCountryActionPerformed(evt);
            }
        });
        getContentPane().add(searchCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 90, 200, 30));

        search1.setBackground(new java.awt.Color(169, 186, 148));
        search1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scholarshipmanagement/transparency.png"))); // NOI18N
        search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search1ActionPerformed(evt);
            }
        });
        getContentPane().add(search1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 200, 70, 30));

        reset1.setBackground(new java.awt.Color(169, 186, 148));
        reset1.setText("RESET");
        reset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset1ActionPerformed(evt);
            }
        });
        getContentPane().add(reset1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 200, 70, 30));

        prevButton.setBackground(new java.awt.Color(169, 186, 148));
        prevButton.setText("Prev");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        getContentPane().add(prevButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 620, 70, 30));

        nextButton.setBackground(new java.awt.Color(169, 186, 148));
        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        getContentPane().add(nextButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 620, 70, 30));

        searchName.setBackground(new java.awt.Color(235, 249, 223));
        searchName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        searchName.setText("Search By Degree Name");
        searchName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchNameMouseClicked(evt);
            }
        });
        searchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchNameActionPerformed(evt);
            }
        });
        getContentPane().add(searchName, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 210, 30));

        cgFrom.setBackground(new java.awt.Color(235, 249, 223));
        cgFrom.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cgFrom.setText("From");
        cgFrom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cgFromMouseClicked(evt);
            }
        });
        cgFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cgFromActionPerformed(evt);
            }
        });
        getContentPane().add(cgFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, 90, 30));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Range of CGPA :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 200, 30));

        jLabel4.setText("Sort By:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 90, 50, 30));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Range of PR :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, 200, 30));

        prFrom.setBackground(new java.awt.Color(235, 249, 223));
        prFrom.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        prFrom.setText("From");
        prFrom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prFromMouseClicked(evt);
            }
        });
        prFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prFromActionPerformed(evt);
            }
        });
        getContentPane().add(prFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, 90, 30));

        sortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "University", "Country", "Subject", "PR", "Session", "CGPA (ASC)", "Last Date" }));
        getContentPane().add(sortBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 90, 160, 30));

        prTo.setBackground(new java.awt.Color(235, 249, 223));
        prTo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        prTo.setText("To");
        prTo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prToMouseClicked(evt);
            }
        });
        prTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prToActionPerformed(evt);
            }
        });
        getContentPane().add(prTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 240, 90, 30));

        jLabel5.setText("Search:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 150, -1, 30));

        sortBy1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Maximum Scholarship (University wise)", "Maximum Scholarship (Degree wise)", "Maximum Scholarship (Subject wise)", "Minimum Required CGPA (Degree wise)", "Minimum Required CGPA (Subject wise)", "Last Date (Subject wise)", "Last Date (Degree wise)" }));
        getContentPane().add(sortBy1, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 150, 260, 30));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scholarshipmanagement/find.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 150, 60, 30));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scholarshipmanagement/sort-down.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 90, 60, 30));

        scholtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Degree Name", "University", "Country", "Subject", "Percentage of PR", "Session", "Minimum CGPA", "Last Date", "Action"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scholtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scholtableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(scholtable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 1280, 290));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scholarshipmanagement/0ee206f6e316fd24c8e484dc3e650ef7.jpg"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1310, 690));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void clearTable(final JTable table) {
        for (int i = 0; i < table.getRowCount(); i++) {
            for(int j = 0; j < table.getColumnCount(); j++) {
                table.setValueAt("", i, j);
            }
        }
    }
    
    private void cgToMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cgToMouseClicked
        // TODO add your handling code here:
        if(cgTo.getText().equals("Search By Minimum CGPA"))
        cgTo.setText("");
    }//GEN-LAST:event_cgToMouseClicked

    private void cgToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cgToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cgToActionPerformed

    private void searchUniMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchUniMouseClicked
        // TODO add your handling code here:

        if(searchUni.getText().equals("Search By University"))
        searchUni.setText("");
    }//GEN-LAST:event_searchUniMouseClicked

    private void searchUniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchUniActionPerformed

    private void searchDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchDateMouseClicked
        // TODO add your handling code here:
        if(searchDate.getText().equals("Search By Last Date"))
        searchDate.setText("");
    }//GEN-LAST:event_searchDateMouseClicked

    private void searchDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchDateActionPerformed

    private void searchSessionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchSessionMouseClicked
        // TODO add your handling code here:
        if(searchSession.getText().equals("Search By Session"))
        searchSession.setText("");
    }//GEN-LAST:event_searchSessionMouseClicked

    private void searchSubMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchSubMouseClicked
        // TODO add your handling code here:
        if(searchSub.getText().equals("Search By Subject"))
        searchSub.setText("");
    }//GEN-LAST:event_searchSubMouseClicked

    private void searchSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSubActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchSubActionPerformed

    private void searchCountryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchCountryMouseClicked
        // TODO add your handling code here:

        if(searchCountry.getText().equals("Search By Country"))
        searchCountry.setText("");
    }//GEN-LAST:event_searchCountryMouseClicked

    private void searchCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCountryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchCountryActionPerformed

    private void search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search1ActionPerformed
        // TODO add your handling code here:
        String query = "";
        String temp;
        Double tempFrom, tempTo;

        temp = searchName.getText();
        if(temp.equals("Search By Degree Name")==false && temp.length()>0)
        {
            if(query.length()==0)
            {
                query+= "where DegreeName  LIKE '%"+temp+"%'";
            }
            else query+="and DegreeName  LIKE '%"+temp+"%'";
        }

        temp = searchUni.getText();
        if(temp.equals("Search By University")==false && temp.length()>0)
        {
            if(query.length()==0)
            {
                query+= "where University  LIKE '%"+temp+"%'";
            }
            else query+="and University  LIKE '%"+temp+"%'";
        }

        temp = searchCountry.getText();
        if(temp.equals("Search By Country")==false && temp.length()>0)
        {
            if(query.length()==0)
            {
                query+= "where CountryName  LIKE '%"+temp+"%'";
            }
            else query+="and CountryName  LIKE '%"+temp+"%'";
        }

        temp = searchSub.getText();
        if(temp.equals("Search By Subject")==false && temp.length()>0)
        {
            if(query.length()==0)
            {
                query+= "where Subject  LIKE '%"+temp+"%'";
            }
            else query+="and Subject  LIKE '%"+temp+"%'";
        }

        temp = searchSession.getText();
        if(temp.equals("Search By Session")==false && temp.length()>0)
        {
            if(query.length()==0)
            {
                query+= "where Session  LIKE '%"+temp+"%'";
            }
            else query+="and Session  LIKE '%"+temp+"%'";
        }

        /*temp = cgTo.getText();
        if(temp.equals("Search By Minimum CGPA")==false && temp.length()>0)
        {
            if(query.length()==0)
            {
                query+= "where MinimumGPA  LIKE '%"+temp+"%'";
            }
            else query+="and MinimumGPA  LIKE '%"+temp+"%'";
        }*/
        
        if (cgFrom.getText().length()==0 || cgTo.getText().length() ==0 ){
            JOptionPane.showMessageDialog(this, "Both of the CGPA Field Has to be Filled", "Warning",JOptionPane.WARNING_MESSAGE);
        }
        
        else if(cgFrom.getText().toString().equals("From")==false && cgTo.getText().toString().equals("To")==false){
            tempFrom = Double.valueOf(cgFrom.getText());
            tempTo = Double.valueOf(cgTo.getText());
            if(query.length()==0)
            {
                query+= "where MinimumGPA between "+tempFrom+" AND "+tempTo;
            }
            else query+="and MinimumGPA between "+tempFrom+" AND "+tempTo;
            
        }
        
        if (prFrom.getText().length()==0 || prTo.getText().length() ==0 ){
            JOptionPane.showMessageDialog(this, "Both of the PR Field Has to be Filled", "Warning",JOptionPane.WARNING_MESSAGE);
        }
        
        else if(prFrom.getText().toString().equals("From")==false && prTo.getText().toString().equals("To")==false){
            tempFrom = Double.valueOf(prFrom.getText());
            tempTo = Double.valueOf(prTo.getText());
            if(query.length()==0)
            {
                query+= "where PercentageOfScholarship between "+tempFrom+" AND "+tempTo;
            }
            else query+="and PercentageOfScholarship between "+tempFrom+" AND "+tempTo;
            
        }
        

        temp = searchDate.getText();
        if(temp.equals("Search By Last Date")==false && temp.length()>0)
        {
            if(query.length()==0)
            {
                query+= "where LastDate  LIKE '%"+temp+"%'";
            }
            else query+="and LastDate  LIKE '%"+temp+"%'";
        }

        arr1.clear();
        arr1 = new ConnectMSSQL().getScholarshipInfo(query);

        modIndex = 0;

        clearTable(scholtable);

        if((modIndex+1)*8>arr1.size())
        currentLength = arr1.size()%16;
        else currentLength = 8;

        for(int i=0;i<currentLength;i++)
        {
            scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
            scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
            scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
            scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
            scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
            scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
            scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
            scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
            scholtable.getModel().setValueAt("Details", i, 8);
        }

        scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
        scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));

        prevButton.setVisible(false);
        if(arr1.size()<=8)
        nextButton.setVisible(false);
    }//GEN-LAST:event_search1ActionPerformed

    private void reset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset1ActionPerformed
        // TODO add your handling code here:
        searchName.setText("Search By Degree Name");
        searchUni.setText("Search By University");
        searchCountry.setText("Search By Country");
        searchSub.setText("Search By Subject");
        searchSession.setText("Search By Session");
        cgTo.setText("To");
        cgFrom.setText("From");
        prFrom.setText("From");
        prTo.setText("To");
        searchDate.setText("Search By Last Date");
    }//GEN-LAST:event_reset1ActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        // TODO add your handling code here:
        modIndex--;
        if(modIndex==0)
        prevButton.setVisible(false);
        nextButton.setVisible(true);
        clearTable(scholtable);
        if((modIndex+1)*8>arr1.size())
        currentLength = arr1.size()%16;
        else currentLength = 8;

        for(int i=0;i<currentLength;i++)
        {
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getDegreeName(), i, 0);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getUniversity(), i, 1);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getCountryName(), i, 2);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getSubject(), i, 3);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getPercentageOfScholarship(), i, 4);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getSession(), i, 5);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getMinimumGPA(), i, 6);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getDate(), i, 7);
            scholtable.getModel().setValueAt("Details", i, 8);

        }
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        modIndex++;
        prevButton.setVisible(true);
        if((modIndex+1)*8>=arr1.size())
        nextButton.setVisible(false);
        clearTable(scholtable);
        if((modIndex+1)*8>arr1.size())
        currentLength = arr1.size()%8;
        else currentLength = 8;

        for(int i=0;i<currentLength;i++)
        {
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getDegreeName(), i, 0);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getUniversity(), i, 1);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getCountryName(), i, 2);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getSubject(), i, 3);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getPercentageOfScholarship(), i, 4);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getSession(), i, 5);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getMinimumGPA(), i, 6);
            scholtable.getModel().setValueAt(arr1.get(i+8*modIndex).getDate(), i, 7);
            scholtable.getModel().setValueAt("Details", i, 8);

        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void searchNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchNameMouseClicked
        // TODO add your handling code here:
        if(searchName.getText().equals("Search By Degree Name"))
        searchName.setText("");
    }//GEN-LAST:event_searchNameMouseClicked

    private void searchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchNameActionPerformed

    private void scholtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scholtableMouseClicked
        // TODO add your handling code here:
        int row = scholtable.getSelectedRow();
        int col = scholtable.getSelectedColumn();
        System.out.println(row +" "+ col+" "+arr1.size());
        if(col==8 && row<currentLength)
        {
            new ScholarshipDetails(StudentId,Integer.toString(arr1.get(row+8*modIndex).getScholarshipID())).setVisible(true);
            
        }
    }//GEN-LAST:event_scholtableMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void cgFromMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cgFromMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cgFromMouseClicked

    private void cgFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cgFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cgFromActionPerformed

    private void prFromMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prFromMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_prFromMouseClicked

    private void prFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prFromActionPerformed

    private void prToMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prToMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_prToMouseClicked

    private void prToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prToActionPerformed

    private void searchSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSessionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchSessionActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String sortItem = sortBy.getSelectedItem().toString();
        if(sortItem == "University")
        {
            String query="order by University";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        if(sortItem == "Country")
        {
            String query="order by CountryName";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        if(sortItem == "Subject")
        {
            String query="order by Subject";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        if(sortItem == "PR")
        {
            String query="order by PercentageOfScholarship";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        if(sortItem == "Session")
        {
            String query="order by RIGHT(Session, 2) ASC";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        if(sortItem == "CGPA (ASC)")
        {
            String query="order by MinimumGPA asc";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        if(sortItem == "Last Date")
        {
            String query="order by LastDate asc";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String sortItem = sortBy1.getSelectedItem().toString();
        if(sortItem == "Maximum Scholarship (University wise)")
        {
            String query="inner join\n" +
                         "(Select University, max(PercentageOfScholarship) as MaxPr\n" +
                         "From Scholarship group by University) tm\n" +
                         "On Scholarship.University = tm.University AND PercentageOfScholarship = tm.MaxPr";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        
        else if (sortItem == "Maximum Scholarship (Degree wise)")
        {
            String query="inner join\n" +
                         "(Select DegreeName,  max(PercentageOfScholarship) as MaxPr\n" +
                         "From Scholarship group by DegreeName) tm\n" +
                         "On Scholarship.DegreeName = tm.DegreeName AND Scholarship.PercentageOfScholarship = tm.MaxPr\n" +
                         "Order By Scholarship.DegreeName, Scholarship.Subject";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        
        else if (sortItem == "Maximum Scholarship (Subject wise)")
        {
            String query="inner join\n" +
                         "(Select Subject,  max(PercentageOfScholarship) as MaxPr\n" +
                         "From Scholarship group by Subject) tm\n" +
                         "On Scholarship.Subject = tm.Subject AND Scholarship.PercentageOfScholarship = tm.MaxPr\n" +
                         "Order By Scholarship.Subject, Scholarship.DegreeName";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        
        else if (sortItem == "Minimum Required CGPA (Degree wise)")
        {
            String query="inner join\n" +
                         "(Select DegreeName,  min(MinimumGPA) as Mincg\n" +
                         "From Scholarship group by DegreeName) tm\n" +
                         "On Scholarship.DegreeName = tm.DegreeName AND Scholarship.MinimumGPA = tm.Mincg\n" +
                         "Order By DegreeName, Subject";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        
        else if (sortItem == "Minimum Required CGPA (Subject wise)")
        {
            String query="inner join\n" +
                         "(Select Subject,  min(MinimumGPA) as Mincg\n" +
                         "From Scholarship group by Subject) tm\n" +
                         "On Scholarship.Subject = tm.Subject AND Scholarship.MinimumGPA = tm.Mincg\n" +
                         "Order By Subject, DegreeName";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        
        else if (sortItem == "Last Date (Subject wise)")
        {
            String query="inner join\n" +
                         "(Select Subject,  max(LastDate) as Maxdate\n" +
                         "From Scholarship group by Subject) tm\n" +
                         "On Scholarship.Subject = tm.Subject AND LastDate = tm.Maxdate\n" +
                         "Order By Subject, DegreeName";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
        
        else if (sortItem == "Last Date (Degree wise)")
        {
            String query="inner join\n" +
                         "(Select DegreeName,  max(LastDate) as Maxdate\n" +
                         "From Scholarship group by DegreeName) tm\n" +
                         "On Scholarship.DegreeName = tm.DegreeName AND LastDate = tm.Maxdate\n" +
                         "Order By DegreeName, Subject";
            arr1.clear();
            arr1 = new ConnectMSSQL().getScholarshipInfo(query);

            modIndex = 0;

            clearTable(scholtable);
            
            if((modIndex+1)*8>arr1.size())
                currentLength = arr1.size()%8;
            else currentLength = 8;
        
            for(int i=0;i<currentLength;i++)
            {
                scholtable.getModel().setValueAt(arr1.get(i).getDegreeName(), i, 0);
                scholtable.getModel().setValueAt(arr1.get(i).getUniversity(), i, 1);
                scholtable.getModel().setValueAt(arr1.get(i).getCountryName(), i, 2);
                scholtable.getModel().setValueAt(arr1.get(i).getSubject(), i, 3);
                scholtable.getModel().setValueAt(arr1.get(i).getPercentageOfScholarship(), i, 4);
                scholtable.getModel().setValueAt(arr1.get(i).getSession(), i, 5);
                scholtable.getModel().setValueAt(arr1.get(i).getMinimumGPA(), i, 6);
                scholtable.getModel().setValueAt(arr1.get(i).getDate(), i, 7);
                scholtable.getModel().setValueAt("Details", i, 8);
            
            }
       
            scholtable.getColumn("Action").setCellRenderer(new ButtonRenderer(currentLength));
            scholtable.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(),scholtable));
        
            prevButton.setVisible(false);
            if(arr1.size()<=8)
                nextButton.setVisible(false);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cgFrom;
    private javax.swing.JTextField cgTo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private javax.swing.JButton nextButton;
    private javax.swing.JTextField prFrom;
    private javax.swing.JTextField prTo;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton reset1;
    private javax.swing.JTable scholtable;
    private javax.swing.JButton search1;
    private javax.swing.JTextField searchCountry;
    private javax.swing.JTextField searchDate;
    private javax.swing.JTextField searchName;
    private javax.swing.JTextField searchSession;
    private javax.swing.JTextField searchSub;
    private javax.swing.JTextField searchUni;
    private javax.swing.JComboBox<String> sortBy;
    private javax.swing.JComboBox<String> sortBy1;
    // End of variables declaration//GEN-END:variables

}
